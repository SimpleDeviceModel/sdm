dofile("${CMAKE_CURRENT_SOURCE_DIR}/../common/testcommon.lua")

seed=os.time()
print("Setting random seed "..seed)
math.randomseed(seed)

plugin=sdm.openplugin(arg[1])
assert(plugin)
dev=plugin.opendevice(0)
assert(dev)
dev.connect()
ch=dev.openchannel(0)
assert(ch)

print("[1] Check nonblocking FIFO operations")

t={1,2,3,4,5}

r=ch.writefifo(0,t)
assert(r==5)
ch.writefifo(0,t,"start")
assert(r==5)
ch.writefifo(0,t,"start")
assert(r==5)

r=ch.readfifo(0,3,"all") -- "all" is default, so it should not have any effect
assert(comparetables(r,{1,2,3}))
r=ch.readfifo(0,3)
assert(comparetables(r,{4,5}))
r=ch.readfifo(0,3)
assert(comparetables(r,{}))

r=ch.readfifo(0,5,"next")
assert(comparetables(r,t))
r=ch.readfifo(0,5)
assert(comparetables(r,{}))

r=ch.readfifo(0,10,"next,nb")
assert(comparetables(r,t))
r=ch.readfifo(0,10,"nb")
assert(r==nil)
r=ch.readfifo(0,10,"next,nb")
assert(r==nil)

print("[2] Check partial blocking FIFO operations")

r=ch.writefifo(0,t,"start")
assert(r==5)
r=ch.readfifo(0,10,"part,next")
assert(comparetables(r,t))

print("[3] Check FIFO-based packet transmission")

print("Generate random packets...")

packets={}
packets_to_generate=100
max_packet_size=100

for i=1,packets_to_generate do
	local size=math.random(1,max_packet_size)
	packets[i]={}
	for j=1,size do
		packets[i][j]=math.random(0,65535)
	end
end

print("Write them to the FIFO...")

for i=1,packets_to_generate do
	ch.writefifo(0,packets[i],"start")
end

print("Read them back...")

read_packets={}
max_read_chunk=100

i=1
while true do
-- Skip until the start of the packet
	ch.readfifo(0,0,"next") -- skip to the next packet
	
	read_packets[i]={}
	
	-- Read some data
	local t
	while true do
		local toread=math.random(1,max_read_chunk)
		t=ch.readfifo(0,toread,"nb")
		if t==nil then break end -- FIFO is empty
		if #t==0 then break end -- end of packet
		for k=1,#t do table.insert(read_packets[i],t[k]) end
	end
	if t==nil then break end -- FIFO is empty
	i=i+1
end

print("Compare...")

assert(comparetables(packets,read_packets))

print("Seems to be OK")

print("Test finished successfully")
