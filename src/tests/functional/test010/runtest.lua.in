function piecewiseread(ch,stream)
	local t={}
	repeat
		local size=math.random(1,7000)
		local tt=ch.readstream(stream,size)
		for i=1,#tt do table.insert(t,tt[i]) end
	until #tt<size
	return t
end

seed=os.time()
print("Setting random seed "..seed)
math.randomseed(seed)

print("Loading plugin...")

pl=sdm.openplugin(arg[1])
dev=pl.opendevice(0)
dev.connect()
src=dev.opensource(0)

print("[1] Test sychronous stream reading")

packets_to_read=50
df=3
src.selectreadstreams({0,1},packets_to_read,df)

for i=1,packets_to_read do
	data0=piecewiseread(src,0)
	data1=piecewiseread(src,1)
	assert(#data0==6400)
	assert(#data1==6400)
	assert(data0[1]==(i-1)*3)
	assert(data1[1]==(i-1)*3)
	assert(data0[2]==0)
	assert(data1[2]==1)
	for j=401,1000 do
		assert(data0[j]==j-1)
		assert(data1[j]==6400-j+1)
	end
	src.readnextpacket()
end

print("Seems to be OK")

print("[2] Test non-blocking reading")

src.MsPerPacket=300
src.selectreadstreams({0,1},0,1)
sdm.sleep(450)
data0=src.readstream(0,10000,"nb")
src.readnextpacket()
data1=src.readstream(0,10000,"nb")
sdm.sleep(300)
data2=src.readstream(0,10000,"nb")
assert(#data0==6400)
local samples
if not data1 then samples=0 else samples=#data1 end
assert(samples<6400)
assert(#data2==6400-samples)

print("Seems to be OK")

print("Test finished successfully")
